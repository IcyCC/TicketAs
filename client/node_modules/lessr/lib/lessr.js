// Generated by CoffeeScript 1.6.2
var Fs, Less, Path, exec;

Fs = require('fs');

Path = require('path');

exec = require('child_process').exec;

Less = require('less');

exports.compile = function(source, opts) {
  var OPTIONS, OUTPUT, SOURCES, compileAll, compileLess, endless, getCssPath, hidden, isLess, log, one, removeSource, unwatchDir, wait, walkPath, watchDir, watchFile, _i, _j, _len, _len1, _ref, _ref1, _ref2;

  SOURCES = {
    compile: [],
    watch: [],
    ignore: {},
    base: {}
  };
  OUTPUT = (_ref = opts != null ? opts.output : void 0) != null ? _ref : null;
  OPTIONS = {
    compress: (_ref1 = opts != null ? opts.compress : void 0) != null ? _ref1 : false
  };
  walkPath = function(path, type, base) {
    return Fs.stat(path, function(err, stats) {
      if ((err != null ? err.code : void 0) === "ENOENT") {
        console.error("Path not found: " + path);
        process.exit(1);
      }
      if (stats.isDirectory()) {
        watchDir(path, type, base);
        return Fs.readdir(path, function(err, files) {
          var file, index, _i, _len, _ref2, _results;

          if (err && err.code !== "ENOENT") {
            throw err;
          }
          if ((err != null ? err.code : void 0) === "ENOENT") {
            return;
          }
          files = files.filter(function(file) {
            return !hidden(file);
          });
          index = SOURCES[type].indexOf(path);
          [].splice.apply(SOURCES[type], [index, index - index + 1].concat(_ref2 = (function() {
            var _i, _len, _results;

            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              _results.push(Path.join(path, file));
            }
            return _results;
          })())), _ref2;
          if (SOURCES.base[path] == null) {
            SOURCES.base[path] = base;
          }
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            _results.push(walkPath(Path.join(path, file), type, base));
          }
          return _results;
        });
      } else if (isLess(path)) {
        if (SOURCES[type].indexOf(path) === -1) {
          SOURCES[type].push(path);
        }
        if (SOURCES.base[path] == null) {
          SOURCES.base[path] = base;
        }
        watchFile(path, type);
        if (type === "compile") {
          return compileLess(path);
        }
      } else {
        return SOURCES.ignore[path] = true;
      }
    });
  };
  watchDir = function(dir, type, base) {
    var err, timer, watcher;

    timer = null;
    try {
      return watcher = Fs.watch(dir, function() {
        clearTimeout(timer);
        return timer = wait(25, function() {
          return Fs.readdir(dir, function(err, files) {
            var file, path, _i, _len, _results;

            if (err) {
              if (err.code !== "ENOENT") {
                throw err;
              }
              watcher.close();
              return unwatchDir(dir, type);
            }
            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              if (!(!hidden(file) && !SOURCES.ignore[file])) {
                continue;
              }
              path = Path.join(dir, file);
              if (SOURCES[type].some(function(s) {
                return s.indexOf(path) >= 0;
              })) {
                continue;
              }
              SOURCES[type].push(path);
              if (SOURCES.base[path] == null) {
                SOURCES.base[path] = base;
              }
              _results.push(walkPath(path, type, base));
            }
            return _results;
          });
        });
      });
    } catch (_error) {
      err = _error;
      if ((err.code != null) !== "ENOENT") {
        throw err;
      }
    }
  };
  unwatchDir = function(dir, type) {
    var file, prev_sources, to_remove, _i, _len, _results;

    prev_sources = SOURCES[type].slice(0);
    to_remove = (function() {
      var _i, _len, _ref2, _results;

      _ref2 = SOURCES[type];
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        file = _ref2[_i];
        if (file.indexOf(dir) >= 0) {
          _results.push(file);
        }
      }
      return _results;
    })();
    _results = [];
    for (_i = 0, _len = to_remove.length; _i < _len; _i++) {
      file = to_remove[_i];
      _results.push(removeSource(file, type));
    }
    return _results;
  };
  removeSource = function(path, type) {
    var css_path, index;

    index = SOURCES[type].indexOf(path);
    if (index >= 0) {
      SOURCES[type].splice(index, 1);
    }
    if (type === "compile") {
      css_path = getCssPath(path, SOURCES.base[path]);
      return Fs.exists(css_path, function(exists) {
        if (!exists) {
          return;
        }
        return Fs.unlink(css_path, function(err) {
          if (err && err.code !== "ENOENT") {
            throw err;
          }
          return log("removed " + path);
        });
      });
    }
  };
  watchFile = function(path, type) {
    var compile, compile_timer, err, errHandler, prev_stats, rewatch;

    prev_stats = null;
    compile_timer = null;
    errHandler = function(err) {
      if (err.code === "ENOENT") {
        if (SOURCES[type].indexOf(path) === -1) {
          return;
        }
        try {
          rewatch();
          return compile();
        } catch (_error) {
          err = _error;
          if (err.code !== "ENOENT") {
            throw err;
          }
          return removeSource(path, type);
        }
      } else {
        throw err;
      }
    };
    compile = function() {
      clearTimeout(compile_timer);
      return compile_timer = wait(25, function() {
        return Fs.stat(path, function(err, stats) {
          if (err) {
            return errHandler(err);
          }
          if (prev_stats && stats.size === prev_stats.size && stats.mtime.getTime() === prev_stats.mtime.getTime()) {
            return rewatch();
          }
          prev_stats = stats;
          if (type === "compile") {
            compileLess(path);
          }
          if (type === "watch") {
            compileAll();
          }
          return rewatch();
        });
      });
    };
    rewatch = function() {
      var watcher;

      if (typeof watcher !== "undefined" && watcher !== null) {
        watcher.close();
      }
      return watcher = Fs.watch(path, compile);
    };
    try {
      return rewatch();
    } catch (_error) {
      err = _error;
      return errHandler(err);
    }
  };
  compileLess = function(path) {
    var errHandler;

    errHandler = function(err) {
      if ((err.code != null) === "ENOENT") {
        return;
      }
      throw err;
    };
    return Fs.readFile(path, function(err, code) {
      if (err) {
        errHandler(err);
      }
      opts = {
        paths: [Path.dirname(path)],
        compress: OPTIONS.compress
      };
      return Less.render(code.toString(), opts, function(err, css) {
        var css_dir, css_path, writeCss;

        if (err) {
          return errHandler(err);
        }
        css_path = getCssPath(path, SOURCES.base[path]);
        css_dir = Path.dirname(css_path);
        writeCss = function() {
          return Fs.writeFile(css_path, css, function(err) {
            if (err) {
              return errHandler(err);
            }
            return log("compiled " + path);
          });
        };
        return Fs.exists(css_dir, function(exists) {
          if (exists) {
            return writeCss();
          } else {
            return exec("mkdir -p " + css_dir, writeCss);
          }
        });
      });
    });
  };
  compileAll = function() {
    var file, _i, _len, _ref2, _results;

    _ref2 = SOURCES["compile"];
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      file = _ref2[_i];
      _results.push(compileLess(file));
    }
    return _results;
  };
  getCssPath = function(path, base) {
    var out_dir, src_dir;

    src_dir = Path.dirname(path);
    out_dir = OUTPUT ? Path.join(OUTPUT, src_dir.substring(base.length)) : src_dir;
    return "" + (Path.join(out_dir, Path.basename(path, ".less"))) + ".css";
  };
  hidden = function(path) {
    return /^\.|~$/.test(path);
  };
  isLess = function(path) {
    return /\.less$/.test(path);
  };
  wait = function(ms, func) {
    return setTimeout(func, ms);
  };
  endless = function(ms, func) {
    return setInterval(func, ms);
  };
  log = function(message) {
    if (process.env.SLIENT != null) {
      return;
    }
    return console.log("" + ((new Date).toLocaleTimeString()) + " - " + message);
  };
  if (typeof source === "string") {
    source = [source];
  }
  for (_i = 0, _len = source.length; _i < _len; _i++) {
    one = source[_i];
    walkPath(one, "compile", Path.normalize(Path.dirname(one)));
  }
  if ((opts != null ? opts.watch : void 0) != null) {
    if (Object.prototype.toString.call(opts.watch) !== "[object Array]") {
      opts.watch = [opts.watch];
    }
    _ref2 = opts.watch;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      one = _ref2[_j];
      walkPath(one, "watch", Path.normalize(Path.dirname(one)));
    }
  }
  this.SOURCES = SOURCES;
  return this;
};
